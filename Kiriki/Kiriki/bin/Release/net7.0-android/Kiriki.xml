<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kiriki</name>
    </assembly>
    <members>
        <member name="M:Kiriki.ViewModel.KirikiVM.MienteCommandExecute">
            <summary>
            Comando que se encarga de comprobar si el jugador miente o no
            Usa 2 booleanos, uno se activaal pulsar el boton y el otro se activa al comprobar si miente o no
            Si quiere comprobar los dados, le da al boton y se activa el booleano, si pulsa otro boton, se activa el otro booleano
            de forma que solo pueda comprobar 1 vez.
            Esto esta hecho asi para evitarme hacer botones de mas y que se vea mas limpio
            </summary>
        </member>
        <member name="M:Kiriki.ViewModel.KirikiVM.PasarTurnoCommandCanExecute">
            <summary>
            Funcion que se encarga de pasar el turno al otro jugador
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kiriki.ViewModel.KirikiVM.PasarTurnoCommandExecute">
            <summary>
            Funcion que se encarga de pasar el turno al otro jugador
            </summary>
        </member>
        <member name="M:Kiriki.ViewModel.KirikiVM.TirarCommandCanExecute">
            <summary>
            Si no ha tirado, puede tirar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kiriki.ViewModel.KirikiVM.MienteCommandCanExecute">
            <summary>
            Si no ha tirado, puede comrpobar si miente
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kiriki.ViewModel.KirikiVM.IniciarConexion">
            <summary>
            Funcion que se ejecuta al iniciar la conexion
            </summary>
        </member>
        <member name="M:Kiriki.ViewModel.KirikiVM.terminarJuego(System.String)">
            <summary>
            Funcion que se encarga de terminar el juego
            </summary>
            <param name="perdedor"></param>
        </member>
        <member name="M:Kiriki.ViewModel.KirikiVM.CalcularVida">
            <summary>
            Funcion que se encarga de calcular la vida del jugador
            Se ejecuta cuando ha mentido y le resta 1 vida
            </summary>
        </member>
        <member name="M:Kiriki.ViewModel.KirikiVM.NuevoTurno">
            <summary>
            Funcion que da el turno al jugador y levanta los botones
            </summary>
        </member>
        <member name="M:Kiriki.ViewModel.KirikiVM.TirarDado(System.Int32,System.Int32)">
            <summary>
            Funcion que recibe los dados del servidor
            </summary>
            <param name="dado1"></param>
            <param name="dado2"></param>
        </member>
        <member name="M:Kiriki.ViewModel.KirikiVM.comprobarVida">
            <summary>
            Funcion que comprueba si el jugador ha perdido
            </summary>
        </member>
        <member name="M:Kiriki.ViewModel.KirikiVM.salirSala">
            <summary>
            Funcion que se encarga de salir de la sala
            </summary>
        </member>
        <member name="T:Kiriki.ViewModel.LoginVM">
            <summary>
            Clase que representa el ViewModel de la pagina de login
            </summary>
        </member>
        <member name="T:Kiriki.ViewModel.SalasVM">
            <summary>
            Clase que representa el ViewModel de la pagina de salas
            </summary>
        </member>
        <member name="M:Kiriki.ViewModel.SalasVM.IniciarConexion">
            <summary>
            Al iniciar la conexion, se conecta al servidor y rellena las salas
            </summary>
        </member>
        <member name="M:Kiriki.ViewModel.SalasVM.rellenarSalas(System.Collections.Generic.List{System.String})">
            <summary>
            Funcion que rellena las salas, se ejecuta al iniciar, al crear una sala y al unirse a una sala
            </summary>
            <param name="salas"></param>
        </member>
        <member name="M:Kiriki.ViewModel.SalasVM.crearSalaExecute">
            <summary>
            Funcion que crea una sala
            </summary>
        </member>
        <member name="M:Kiriki.ViewModel.SalasVM.unirseSalaCanExecute">
            <summary>
            Funcion que comprueba si se puede unir a una sala
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kiriki.ViewModel.SalasVM.unirseSalaExecute">
            <summary>
            Funcion que se encarga de unirse a una sala
            </summary>
        </member>
        <member name="M:Kiriki.ViewModel.Sources.DelegateCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the RelayCommand class that 
            can always execute.
            </summary>
            <param name="execute">The execution logic.</param>
            <exception cref="T:System.ArgumentNullException">If the execute argument is null.</exception>
        </member>
        <member name="M:Kiriki.ViewModel.Sources.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
            <exception cref="T:System.ArgumentNullException">If the execute argument is null.</exception>
        </member>
        <member name="E:Kiriki.ViewModel.Sources.DelegateCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute.
            </summary>
        </member>
        <member name="M:Kiriki.ViewModel.Sources.DelegateCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="E:Kiriki.ViewModel.Sources.DelegateCommand.CanExecuteChanged" /> event.
            </summary>
        </member>
        <member name="M:Kiriki.ViewModel.Sources.DelegateCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">This parameter will always be ignored.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:Kiriki.ViewModel.Sources.DelegateCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked. 
            </summary>
            <param name="parameter">This parameter will always be ignored.</param>
        </member>
    </members>
</doc>
